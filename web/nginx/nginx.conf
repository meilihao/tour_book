## 特别说明
# 1. include指令 : 将引用的文件内容插入到该位置,支持通配符"*".
# 1. 指令块 : 模块的指令,比如event指令块.
# 1. 一个指令块中嵌套其他指令块,那么被嵌套的指令块会继承其父指令块的设置,比如server块;
# 但也允许显式覆盖父指令,比如location的access_log覆盖server的.
# 1. 变量 : 模块提供各种变量,用于指定变量值,比如$nginx_version.

# 参考: [从一份配置清单详解Nginx服务器配置](https://my.oschina.net/hansonwang99/blog/1835408)


#定义Nginx工作进程的用户和用户组
user www www;

#nginx工作进程数，建议设置为等于CPU总核心数
worker_processes 8;

#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]
error_log /var/log/nginx/error.log info;
# 是否记录404错误
log_not_found on;

#进程pid文件
pid /var/run/nginx.pid;

#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。
worker_rlimit_nofile 65535;

#工作模式与连接数上限
events {
	#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ];如果在FreeBSD上面，就用kqueue模型
	#epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
	use epoll; 
	#单个进程最大连接数
	#最大连接数=连接数*进程数
	worker_connections 65535;
}

#设定http服务器
http {
	include mime.types; #文件扩展名与文件类型映射表
	default_type application/octet-stream; #默认文件类型
	#charset utf-8; #默认编码
	server_names_hash_bucket_size 128; #服务器名字hash表中一条记录的最大长度
	#在解析request line的时候，回首先分配一个client_header_buffer_size来解析请求，当空间不足的时候，copy数据到第一个large_client_header_buffers中，
	#如果这个buf仍然不能满足要求就返回400,所以
        #1. 如果你的请求中的header都很大，那么应该使用client_header_buffer_size，这样能减少一次内存分配。
	#2. 如果你的请求中只有少量请求header很大，那么应该使用large_client_header_buffers，因为这样就仅需在处理大header时才会分配更多的空间，从而减少无谓的内存空间浪费
	client_header_buffer_size 32k; #客户端请求头部的缓冲区大小
	large_client_header_buffers 4 64k; #定义数量和缓存区大小
	client_max_body_size 8m; #限制客户端http body的最大值,超过nginx返回413
	sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。
	autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。
	tcp_nopush on; #防止网络阻塞,仅用于sendfile已启用的情况.
	tcp_nodelay on; #禁用Nagle缓冲算法,防止网络阻塞,仅用于keep-alive连接.
	keepalive_timeout 120; #长连接超时时间，单位是秒

	#gzip模块设置
	gzip on; #开启gzip压缩输出
	gzip_min_length 1k; #最小压缩文件大小
	gzip_buffers 4 16k; #压缩缓冲区
	gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）
	gzip_comp_level 2; #压缩等级
	gzip_types text/plain application/x-javascript text/css application/xml;
	#压缩类型，默认就已经包含text/html，所以上面就不用再写了，写上去也不会有问题，但是会有一个warn
	gzip_vary on;
	#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用

	upstream blog.ha97.com {
		vnswrr; # [enable VNSWRR load balancing algorithm](https://mp.weixin.qq.com/s?__biz=MzIzNjUxMzk2NQ==&mid=2247491425&idx=1&sn=f4ec340661067e63fb91272c85b274d1)
		#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。
		server 192.168.80.121:80 weight=3;
		server 192.168.80.122:80 weight=2;
		server 192.168.80.123:80 weight=3;
	}

	#server块定义了虚拟主机
	server {
		#监听端口
		#Nginx通过HTTP请求中的Host值来查找对应的虚拟主机.找不到,找带default_server的主机->没有,找localhost的主机->再没有,404.
		listen 80 default_server;
		#域名可以有多个，用空格隔开,会和请求header中的Host匹配
		server_name www.ha97.com ha97.com;
		#定义首页索引文件的名称
		index index.html index.htm index.php;
		#定义服务器上网站根目录位置
		root /data/www/ha97;
		#日志格式设定
		log_format access '$remote_addr - $remote_user [$time_local] "$request" '
		'$status $body_bytes_sent "$http_referer" '
		'"$http_user_agent" $http_x_forwarded_for';
		#定义本虚拟主机的访问日志
		access_log /var/log/nginx/ha97access.log access;

		location ~ .*\.(php|php5)?$ {
			fastcgi_pass 127.0.0.1:9000;
			fastcgi_index index.php;
			include fastcgi.conf;
		}

		#图片缓存时间设置
		location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ {
			expires 10d;
		}

		#JS和CSS缓存时间设置
		location ~ .*\.(js|css)?$ {
			expires 1h;
		}

		location /static2/ {
			alias html/lib/;# 为nginx指定的文件路径提供别名
		}

		#对 "/" 启用反向代理
		location / {
			proxy_pass http://127.0.0.1:88;
			proxy_redirect off;
			proxy_set_header X-Real-IP $remote_addr;
			#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			#以下是一些反向代理的配置，可选。
			proxy_set_header Host $host;
			client_max_body_size 10m; #允许客户端请求的最大单文件字节数
			client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，
			proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)
			proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)
			proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)
			proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小
			proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置
			proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）
			proxy_temp_file_write_size 64k;
			#设定缓存文件夹大小，大于这个值，将从upstream服务器传
		}

		#设定查看Nginx状态的地址
		location /NginxStatus {
			stub_status on;
			access_log on;
			auth_basic "NginxStatus";
			auth_basic_user_file conf/htpasswd;
			#htpasswd文件的内容可以用apache提供的htpasswd工具来产生。
		}

		#本地动静分离反向代理配置
		#所有jsp的页面均交由tomcat或resin处理
		location ~ .(jsp|jspx|do)?$ {
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_pass http://127.0.0.1:8080;
		}
		
		#所有静态文件由nginx直接读取不经过tomcat或resin
		location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$
		{
			expires 15d;
		}

		location ~ .*.(js|css)?$ { 
			expires 1h;
		}

		error_page 500 502 503 504 /50x.html;
		location = /50x.html {
		    	root html;
		}
	}
}
